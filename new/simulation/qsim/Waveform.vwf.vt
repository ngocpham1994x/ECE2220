// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/03/2020 15:20:09"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          new
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module new_vlg_vec_tst();
// constants                                           
// general purpose registers
reg hour_button;
reg internal_clock;
reg minute_button;
reg reset_alarm;
reg reset_clock;
reg switch_screen_slideswitch;
// wires                                               
wire alarm_LED;
wire clock_1s;
wire [6:0] hour0_SSD;
wire [6:0] hour1_SSD;
wire hour_button_LED;
wire [6:0] minute0_SSD;
wire [6:0] minute1_SSD;
wire minute_button_LED;
wire reset_alarm_LED;
wire reset_clock_LED;
wire [6:0] second0_SSD;
wire [6:0] second1_SSD;

// assign statements (if any)                          
new i1 (
// port map - connection between master ports and signals/registers   
	.alarm_LED(alarm_LED),
	.clock_1s(clock_1s),
	.hour0_SSD(hour0_SSD),
	.hour1_SSD(hour1_SSD),
	.hour_button(hour_button),
	.hour_button_LED(hour_button_LED),
	.internal_clock(internal_clock),
	.minute0_SSD(minute0_SSD),
	.minute1_SSD(minute1_SSD),
	.minute_button(minute_button),
	.minute_button_LED(minute_button_LED),
	.reset_alarm(reset_alarm),
	.reset_alarm_LED(reset_alarm_LED),
	.reset_clock(reset_clock),
	.reset_clock_LED(reset_clock_LED),
	.second0_SSD(second0_SSD),
	.second1_SSD(second1_SSD),
	.switch_screen_slideswitch(switch_screen_slideswitch)
);
initial 
begin 
#1000000 $finish;
end 

// internal_clock
always
begin
	internal_clock = 1'b0;
	internal_clock = #20000 1'b1;
	#20000;
end 

// reset_alarm
initial
begin
	reset_alarm = 1'b0;
	reset_alarm = #480000 1'b1;
	reset_alarm = #20000 1'b0;
end 
endmodule

