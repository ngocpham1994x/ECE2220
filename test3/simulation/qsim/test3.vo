// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 18.0.0 Build 614 04/24/2018 SJ Lite Edition"

// DATE "11/30/2020 00:26:01"

// 
// Device: Altera 5CSXFC6D6F31C6 Package FBGA896
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module test3 (
	push_button,
	push_button_LED);
input 	push_button;
output 	push_button_LED;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \push_button_LED~output_o ;
wire \push_button~input_o ;


cyclonev_io_obuf \push_button_LED~output (
	.i(\push_button~input_o ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\push_button_LED~output_o ),
	.obar());
// synopsys translate_off
defparam \push_button_LED~output .bus_hold = "false";
defparam \push_button_LED~output .open_drain_output = "false";
defparam \push_button_LED~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \push_button~input (
	.i(push_button),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\push_button~input_o ));
// synopsys translate_off
defparam \push_button~input .bus_hold = "false";
defparam \push_button~input .simulate_z_as = "z";
// synopsys translate_on

assign push_button_LED = \push_button_LED~output_o ;

endmodule
