// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/01/2020 20:25:34"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab07_e1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab07_e1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg J;
reg K;
reg key;
// wires                                               
wire LED0;
wire LED1;
wire LED9;
wire q;
wire qbar;

// assign statements (if any)                          
lab07_e1 i1 (
// port map - connection between master ports and signals/registers   
	.J(J),
	.K(K),
	.LED0(LED0),
	.LED1(LED1),
	.LED9(LED9),
	.key(key),
	.q(q),
	.qbar(qbar)
);
initial 
begin 
#200000 $finish;
end 

// J
always
begin
	J = 1'b0;
	J = #20000 1'b1;
	#20000;
end 

// K
initial
begin
	repeat(6)
	begin
		K = 1'b0;
		K = #15000 1'b1;
		# 15000;
	end
	K = 1'b0;
	K = #15000 1'b1;
end 

// key
always
begin
	key = 1'b0;
	key = #10000 1'b1;
	#10000;
end 
endmodule

