// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/24/2020 17:19:17"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab02
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab02_vlg_vec_tst();
// constants                                           
// general purpose registers
reg door;
reg e_stop;
reg flow_lim;
reg pwr;
reg water_level;
// wires                                               
wire [3:0] LED;
wire e_pressed;
wire motor;

// assign statements (if any)                          
lab02 i1 (
// port map - connection between master ports and signals/registers   
	.LED(LED),
	.door(door),
	.e_pressed(e_pressed),
	.e_stop(e_stop),
	.flow_lim(flow_lim),
	.motor(motor),
	.pwr(pwr),
	.water_level(water_level)
);
initial 
begin 
#300000 $finish;
end 

// pwr
always
begin
	pwr = 1'b0;
	pwr = #10000 1'b1;
	#10000;
end 

// door
initial
begin
	repeat(7)
	begin
		door = 1'b0;
		door = #20000 1'b1;
		# 20000;
	end
	door = 1'b0;
end 

// water_level
initial
begin
	repeat(3)
	begin
		water_level = 1'b0;
		water_level = #40000 1'b1;
		# 40000;
	end
	water_level = 1'b0;
	water_level = #40000 1'b1;
end 

// flow_lim
initial
begin
	flow_lim = 1'b0;
	flow_lim = #80000 1'b1;
	flow_lim = #80000 1'b0;
	flow_lim = #80000 1'b1;
end 

// e_stop
initial
begin
	e_stop = 1'b1;
	e_stop = #160000 1'b0;
end 
endmodule

